# Decisivis Core - Environment Configuration
# Production-ready football prediction system using 80/20 principle

# ===== CORE DATABASES (Your Existing Infrastructure) =====

# PostgreSQL (Neon) - Main database for matches, predictions, learning
DATABASE_URL="postgres://neondb_owner:npg_0p2JovChjXZy@ep-misty-river-aba2zdk3-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require"
DATABASE_URL_UNPOOLED="postgresql://neondb_owner:npg_0p2JovChjXZy@ep-misty-river-aba2zdk3.eu-west-2.aws.neon.tech/neondb?sslmode=require"
PGHOST="ep-misty-river-aba2zdk3-pooler.eu-west-2.aws.neon.tech"
PGUSER="neondb_owner"
PGDATABASE="neondb"
PGPASSWORD="npg_0p2JovChjXZy"

# Redis (Upstash KV) - Real-time caching, model state
KV_REST_API_URL="https://summary-goat-51001.upstash.io"
KV_REST_API_TOKEN="Acc5AAIjcDEyOGRkYmVhYzZkNzk0OWFlYTU5OTkxNDZhNTFhNGI5M3AxMA"
KV_REST_API_READ_ONLY_TOKEN="Asc5AAIgcDHcGisWDPhmYqhOhAC1CL4WuCci7xiAGz2XhePeqTfFvQ"
REDIS_URL="rediss://default:Acc5AAIjcDEyOGRkYmVhYzZkNzk0OWFlYTU5OTkxNDZhNTFhNGI5M3AxMA@summary-goat-51001.upstash.io:6379"

# Vector DB (Upstash) - For similarity search, pattern matching
UPSTASH_VECTOR_REST_URL="https://genuine-hamster-95494-us1-vector.upstash.io"
UPSTASH_VECTOR_REST_TOKEN="ABkFMGdlbnVpbmUtaGFtc3Rlci05NTQ5NC11czFhZG1pbk1tWmxaRFl3TjJZdE1UY3dZaTAwTjJFMkxXRmlNRFl0T0RJeVlqY3lObU16TkRZMw=="
UPSTASH_VECTOR_REST_READONLY_TOKEN="ABkIMGdlbnVpbmUtaGFtc3Rlci05NTQ5NC11czFyZWFkb25seU0yTTFORGcwTldVdE9EVmtNQzAwWTJOa0xXSmxPRFl0WWpGbU1qZGxOR0UxT1dZdw=="

# Queue (QStash) - Background jobs, model retraining
QSTASH_TOKEN="eyJVc2VySUQiOiIwMTkzNDZlNi0yYmMyLTQ3NTItOGY2MC04ODExNjZhZjRmMWIiLCJQYXNzd29yZCI6IjRiY2ZlNjBjYTQ2MzRlZmQ5NTU1MzVkNjMxYzljOWIwIn0="
QSTASH_URL="https://qstash.upstash.io"
QSTASH_CURRENT_SIGNING_KEY="sig_5crmkXnKkWCXA85PABaT5kB7DiuY"
QSTASH_NEXT_SIGNING_KEY="sig_76gw3J718KgQeT3nR7nfu6aVpSPd"

# ===== PRIMARY DATA SOURCES =====

# StatsBomb (FREE - Most Important for shots on target)
STATSBOMB_BASE_URL="https://raw.githubusercontent.com/statsbomb/open-data/master/data"

# Transfermarkt via Kaggle (Team strength/market values)
# TODO: Add your Kaggle credentials from football-match-predictor/.env.unified
KAGGLE_USERNAME=your_kaggle_username
KAGGLE_KEY=your_kaggle_key

# ===== EXISTING FOOTBALL APIs =====

# API-Football (from decisivis-engine)
FOOTBALL_API_KEY=fdc34bcaf6321f7569ff3213713c93bb
API_FOOTBALL_KEY=fdc34bcaf6321f7569ff3213713c93bb

# The Odds API (from decisivis-engine)
ODDS_API_KEY=5ed97e98f1827ef2a33a446193ebcf1f
THE_ODDS_API_KEY=5ed97e98f1827ef2a33a446193ebcf1f

# ===== OPTIONAL DATA SOURCES (Per 80/20 - Skip Initially) =====

# News API (Only adds 2-3% accuracy - not worth complexity initially)
# NEWS_API_KEY=skip_for_now

# ===== APPLICATION SETTINGS =====

# Environment
ENVIRONMENT=production
DEBUG=False
LOG_LEVEL=INFO

# Security
SECRET_KEY=decisivis-core-2024-production-key-change-this
CRON_SECRET=aspireverse_cron_2025

# API Server
API_HOST=0.0.0.0
API_PORT=8000
NEXT_PUBLIC_API_URL=http://localhost:8000

# ===== MODEL CONFIGURATION =====

# Core Features (80/20 Principle)
USE_SHOTS_ON_TARGET=true      # 14.2% importance
USE_HOME_ADVANTAGE=true       # 13.5% importance
USE_RECENT_FORM=true          # 11% importance
USE_TEAM_STRENGTH=true        # 9% importance
USE_H2H_HISTORY=true          # 6% importance

# Temporal Decay for Recent Form
TEMPORAL_DECAY_WEIGHTS=[2.0, 1.5, 1.0, 1.0, 1.0]  # Last 5 games
RECENT_MATCHES_WINDOW=5

# ===== PREDICTION SETTINGS =====

# Confidence thresholds
MIN_CONFIDENCE_THRESHOLD=0.5
HIGH_CONFIDENCE_THRESHOLD=0.7

# Performance targets
TARGET_ACCURACY=0.70           # 70% minimum
TARGET_RESPONSE_TIME_MS=100    # 100ms maximum

# Caching
CACHE_TTL_SECONDS=3600         # 1 hour
CACHE_PREDICTIONS=true

# ===== SELF-LEARNING SETTINGS =====

# Retraining triggers
RETRAINING_INTERVAL_DAYS=7
MIN_MATCHES_FOR_RETRAINING=50
RETRAIN_AFTER_N_PREDICTIONS=100

# Performance monitoring
PERFORMANCE_DROP_THRESHOLD=0.02  # Retrain if accuracy drops 2%
MIN_ACCURACY_THRESHOLD=0.68      # Alert if below 68%

# Learning rate
LEARNING_RATE_INCREASE_TARGET=0.01  # +1% per 100 predictions

# ===== DEPLOYMENT SETTINGS =====

# Vercel
VERCEL_ENV=production
VERCEL_URL=https://decisivis-core.vercel.app
ENABLE_VERCEL_ANALYTICS=true

# Monitoring
ENABLE_MONITORING=true
ALERT_EMAIL=admin@decisivis.com
SLACK_WEBHOOK_URL=

# ===== DEVELOPMENT SETTINGS =====

# Testing
TEST_MODE=false
USE_CACHED_DATA=false
MOCK_EXTERNAL_APIS=false

# Debugging
VERBOSE_LOGGING=false
SAVE_DEBUG_DATA=false

# ===== NOTES =====
# 1. StatsBomb is the PRIMARY data source (free, has real shots on target)
# 2. Use PostgreSQL (Neon) for persistence, not in-memory storage
# 3. Redis (Upstash) for caching to achieve < 100ms response
# 4. QStash for background retraining jobs
# 5. Focus on the 5 features that matter (53.7% predictive power)
# 6. One LogisticRegression model - no complex ensembles
# 7. Target: 70%+ accuracy with < 1000 lines of code